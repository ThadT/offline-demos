//   Copyright 2023 Esri
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

#if ANDROID

using Android.App;
using Application = Microsoft.Maui.Controls.Application;
using Android.Content;
using Android.Content.PM;

#endif

using Esri.ArcGISRuntime.Security;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading.Tasks;

namespace OfflineWithPackages
{
    //@@Start(UpdateOAuthInfoContext)
    // A helper class that manages authenticating with a server to access secure resources.
    internal static class AuthenticationHelper
    {
        // Specify the client ID and redirect URL to use for OAuth authentication.
        // See https://developers.arcgis.com/net/security-and-authentication/tutorials/access-services-with-oauth-2-0-maui/
        //@@Start(UpdateOAuthInfo)
        private const string OAuthClientID = "CLIENT_ID";
        private const string OAuthRedirectUrl = "my-app://auth"; // or other redirect URL
        //@@End(UpdateOAuthInfo,UpdateOAuthInfoContext)
        static AuthenticationHelper()
        {
            // Use the OAuthAuthorize class (defined below) to show the login UI.
            AuthenticationManager.Current.OAuthAuthorizeHandler = new OAuthAuthorize();

            // Create a new ChallengeHandler that uses a method in this class to challenge for credentials.
            AuthenticationManager.Current.ChallengeHandler = new ChallengeHandler(PromptCredentialAsync);
        }

        // A function to register a secure server with the AuthenticationManager.
        // Pass in the URL of the server containing secure resources and, optionally, a client ID and
        // redirect URL (if not specified, the values defined above are used).
        public static void RegisterSecureServer(string url,
                                                string clientID = OAuthClientID,
                                                string redirectUrl = OAuthRedirectUrl)
        {
            // Define the server URL, authentication type, client ID, and redirect URL.
            ServerInfo portalServerInfo = new ServerInfo(new Uri(url))
            {
                TokenAuthenticationType = TokenAuthenticationType.OAuthAuthorizationCode,
                OAuthClientInfo = new OAuthClientInfo(clientID, new Uri(redirectUrl))
            };

            // Register the server information with the AuthenticationManager.
            AuthenticationManager.Current.RegisterServer(portalServerInfo);
        }
        //@@Start(ApplyTemporaryToken)
        // A function that adds a credential to AuthenticationManager based on a temporary token.
        // This is useful for testing an app with secured services without having to log in.
        public static void ApplyTemporaryToken(string url, string token)
        {
            // Create a new OAuth credential for the specified URL with the token.
            OAuthTokenCredential tempToken = new OAuthTokenCredential(new Uri(url), token);

            // Add the credential to the AuthenticationManager.
            AuthenticationManager.Current.AddCredential(tempToken);
        }
        //@@End(ApplyTemporaryToken)
        // The ChallengeHandler function that is called when access to a secured resource is attempted.
        public static async Task<Credential> PromptCredentialAsync(CredentialRequestInfo info)
        {
            Credential credential = null;

            try
            {
                // Get credentials for the specified server. The OAuthAuthorize class (defined below)
                // will get the user's credentials (show the login window and handle the response).
                credential = await AuthenticationManager.Current.GenerateCredentialAsync(info.ServiceUri);
            }
            catch (OperationCanceledException)
            {
                // Login was cancelled, no need to display an error to the user.
            }

            return credential;
        }

        #region OAuth handler

        // In a .NET MAUI app, an IOAuthAuthorizeHandler component is used to handle some of
        // the OAuth details. Specifically, it implements AuthorizeAsync to show the login UI
        // (generated by the server that hosts secure content) in a WebAuthenticator. When the user
        // logs in successfully, cancels the login, or closes the window without continuing, the
        // IOAuthAuthorizeHandler is responsible for obtaining the authorization from the server
        // or raising an OperationCanceledException.
        public class OAuthAuthorize : IOAuthAuthorizeHandler
        {
            // Function to initiate an authorization request. It takes the URIs for: the secured service,
            // the authorization endpoint, and the redirect URI.
#if MACCATALYST || IOS
            public Task<IDictionary<string, string>> AuthorizeAsync(Uri serviceUri, Uri authorizeUri, Uri callbackUri)
            {
                // Use a TaskCompletionSource to track the completion of the authorization.
                var tcs = new TaskCompletionSource<IDictionary<string, string>>();
                Microsoft.Maui.ApplicationModel.MainThread.BeginInvokeOnMainThread(async () =>
                {
                    try
                    {
                        var result = await WebAuthenticator.AuthenticateAsync(authorizeUri, callbackUri);
                        tcs.TrySetResult(result.Properties);
                    }
                    catch (Exception ex)
                    {
                        tcs.TrySetException(ex);
                    }
                });
                return tcs.Task;
            }
#elif ANDROID
            public async Task<IDictionary<string, string>> AuthorizeAsync(Uri serviceUri, Uri authorizeUri, Uri callbackUri)
            {
                var result = await WebAuthenticator.AuthenticateAsync(authorizeUri, callbackUri);
                return result.Properties;
            }
#elif WINDOWS
            // WebAuthenticator does not currently work on Windows without the WinUIEx library.
            // https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/communication/authentication?tabs=windows
            public async Task<IDictionary<string, string>> AuthorizeAsync(Uri serviceUri, Uri authorizeUri, Uri callbackUri)
            {
                var result = await WinUIEx.WebAuthenticator.AuthenticateAsync(authorizeUri, callbackUri);

                return result.Properties;
            }

#endif

#if ANDROID
            // Android requires an Intent Filter setup to handle your callback URI. 
            // This is accomplished by inheriting from the WebAuthenticatorCallbackActivity class.
            // https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/communication/authentication?tabs=android
            // @@Start(WebAuthenticationCallbackActivity)
            [Activity(NoHistory = true, Exported = true, LaunchMode = LaunchMode.SingleTop)]
            [IntentFilter(new[] { Intent.ActionView },
               Categories = new[] { Intent.CategoryDefault, Intent.CategoryBrowsable },
               DataScheme = "my-app", DataHost = "auth")]
            public class WebAuthenticationCallbackActivity : WebAuthenticatorCallbackActivity
            {
            }
            // @@End(WebAuthenticationCallbackActivity)
#endif

            #endregion OAuth handler

        }
    }
}
